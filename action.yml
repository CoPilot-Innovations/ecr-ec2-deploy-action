name: 'ECR Deploy Action'
description: 'Build and deploy Docker images to Amazon ECR and EC2'
inputs:
  aws-access-key-id:
    description: 'AWS Access Key ID'
    required: true
  aws-secret-access-key:
    description: 'AWS Secret Access Key'
    required: true
  aws-region:
    description: 'AWS Region'
    required: true
    default: 'ap-southeast-2'
  ecr-repository:
    description: 'ECR Repository name'
    required: true
  image-tag:
    description: 'Docker image tag'
    required: true
    default: 'latest'
  ec2-host:
    description: 'EC2 host address'
    required: true
  ec2-user:
    description: 'EC2 username'
    required: true
  ec2-private-key:
    description: 'EC2 SSH private key'
    required: true
  container-name:
    description: 'Name for the Docker container'
    required: true
  container-port:
    description: 'Container port to expose'
    required: true
    default: '5000'
  host-port:
    description: 'Host port to map'
    required: true
    default: '4000'
  env-content:
    description: 'Environment variables as a string'
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push Docker image
      shell: bash
      run: |
        docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr-repository }}:${{ inputs.image-tag }} .
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr-repository }}:${{ inputs.image-tag }}
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ inputs.ec2-host }}
        username: ${{ inputs.ec2-user }}
        key: ${{ inputs.ec2-private-key }}
        port: 22
        script: |
          export REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          export REPOSITORY="${{ inputs.ecr-repository }}"
          export IMAGE_TAG="${{ inputs.image-tag }}"
          export CONTAINER_NAME="${{ inputs.container-name }}"
          export AWS_ACCESS_KEY_ID="${{ inputs.aws-access-key-id }}"
          export AWS_SECRET_ACCESS_KEY="${{ inputs.aws-secret-access-key }}"
          export AWS_DEFAULT_REGION="${{ inputs.aws-region }}"
          
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REGISTRY
          
          docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
          
          # Stop and remove any existing container with the same name
          CONTAINER_ID=$(docker ps -q --filter name=$CONTAINER_NAME)
          if [ ! -z "$CONTAINER_ID" ]; then
            sleep 2
            docker stop $CONTAINER_ID
            sleep 2
            docker rm $CONTAINER_ID
          fi

          # Create a .env file from the env-content input using printf
          ENV_FILE_PATH="/home/${{ inputs.ec2-user }}/${{ inputs.container-name }}.env"
          printf "%s" "${{ inputs.env-content }}" > $ENV_FILE_PATH
          
          # Clean up old images
          docker image prune -a -f
          
          # Run the container with the new .env file
          docker run -p ${{ inputs.host-port }}:${{ inputs.container-port }} --env-file $ENV_FILE_PATH --rm --name $CONTAINER_NAME $REGISTRY/$REPOSITORY:$IMAGE_TAG
